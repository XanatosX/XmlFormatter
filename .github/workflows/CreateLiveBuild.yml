name: Live build

on:
  push:
    tags:
     - '*.*.*'

jobs:
   createAvaloniaBuildWindows:
     name: Create Avalonia build for Windows
     runs-on: windows-latest
     steps:
       - name: Clone repository
         uses: actions/checkout@v2
         with:
          lfs: true
       - name: Get release tag
         run: echo "RELEASE_VERSION=$(($env:GITHUB_REF -split '/')[-1] -replace ' ','')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
       - name: Check release version
         run: echo ${{ env.RELEASE_VERSION }}
       - name: Prepare version
         run: echo ${{ env.RELEASE_VERSION }} | Out-File -FilePath .\src\XmlFormatterOsIndependent\Version.txt -Encoding utf8
       - name: Check version file
         run: Get-Content -Path .\src\XmlFormatterOsIndependent\Version.txt
       - name: Build project
         run: | 
           dotnet publish .\src\XmlFormatterOsIndependent\ -c Release -r win-x64 --self-contained true
           dotnet publish .\src\CorePlugin\ -c Release -r win-x64
           dotnet publish .\src\JsonPlugin\ -c Release -r win-x64
         shell: powershell
       - name: Move artifact files
         run: |
           mkdir upload-artifacts\
           mkdir plugins\
           mv .\src\CorePlugin\bin\Release\netstandard2.0\win-x64\publish\CorePlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\win-x64\publish\JsonPlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\win-x64\publish\Newtonsoft.Json.dll plugins\
           mv .\src\XmlFormatterOsIndependent\bin\Release\netcoreapp3.1\win-x64\publish\** upload-artifacts\
           mv LICENSE upload-artifacts\
           mv README.md upload-artifacts\  
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: AvaloniaWindowsBuildArtifact
          path: |
            upload-artifacts/
            plugins/
   createAvaloniaBuildLinux:
     name: Create Avalonia build for Linux
     runs-on: windows-latest
     steps:
       - name: Clone repository
         uses: actions/checkout@v2
         with:
          lfs: true
       - name: Get release tag
         run: echo "RELEASE_VERSION=$(($env:GITHUB_REF -split '/')[-1] -replace ' ','')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
       - name: Check release version
         run: echo ${{ env.RELEASE_VERSION }}
       - name: Prepare version
         run: echo ${{ env.RELEASE_VERSION }} | Out-File -FilePath .\src\XmlFormatterOsIndependent\Version.txt -Encoding utf8
       - name: Check version file
         run: Get-Content -Path .\src\XmlFormatterOsIndependent\Version.txt
       - name: Build project
         run: | 
           dotnet publish .\src\XmlFormatterOsIndependent\ -c Release -r linux-x64 --self-contained true
           dotnet publish .\src\CorePlugin\ -c Release -r linux-x64
           dotnet publish .\src\JsonPlugin\ -c Release -r linux-x64
         shell: powershell
       - name: Move artifact files
         run: |
           mkdir upload-artifacts\
           mkdir plugins\
           mv .\src\CorePlugin\bin\Release\netstandard2.0\linux-x64\publish\CorePlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\linux-x64\publish\JsonPlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\linux-x64\publish\Newtonsoft.Json.dll plugins\
           mv .\src\XmlFormatterOsIndependent\bin\Release\netcoreapp3.1\linux-x64\publish\** upload-artifacts\
           mv LICENSE upload-artifacts\
           mv README.md upload-artifacts\  
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: AvaloniaLinuxBuildArtifact
          path: |
            upload-artifacts/
            plugins/
   createAvaloniaBuildDarwin:
     name: Create Avalonia build for Darwin
     runs-on: windows-latest
     steps:
       - name: Clone repository
         uses: actions/checkout@v2
         with:
          lfs: true
       - name: Get release tag
         run: echo "RELEASE_VERSION=$(($env:GITHUB_REF -split '/')[-1] -replace ' ','')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
       - name: Check release version
         run: echo ${{ env.RELEASE_VERSION }}
       - name: Prepare version
         run: echo ${{ env.RELEASE_VERSION }} | Out-File -FilePath .\src\XmlFormatterOsIndependent\Version.txt -Encoding utf8
       - name: Check version file
         run: Get-Content -Path .\src\XmlFormatterOsIndependent\Version.txt
       - name: Build project
         run: | 
           dotnet publish .\src\XmlFormatterOsIndependent\ -c Release -r osx-x64 --self-contained true
           dotnet publish .\src\CorePlugin\ -c Release -r osx-x64
           dotnet publish .\src\JsonPlugin\ -c Release -r osx-x64
         shell: powershell
       - name: Move artifact files
         run: |
           mkdir upload-artifacts\
           mkdir plugins\
           mv .\src\CorePlugin\bin\Release\netstandard2.0\osx-x64\publish\CorePlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\osx-x64\publish\JsonPlugin.dll plugins\
           mv .\src\JsonPlugin\bin\Release\netstandard2.0\osx-x64\publish\Newtonsoft.Json.dll plugins\
           mv .\src\XmlFormatterOsIndependent\bin\Release\netcoreapp3.1\osx-x64\publish\** upload-artifacts\
           mv LICENSE upload-artifacts\
           mv README.md upload-artifacts\  
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: AvaloniaDarwinBuildArtifact
          path: |
            upload-artifacts/
            plugins/
   createAvaloniaZipWindows:
     name: Create Avalonia Windows zip
     needs: ["createAvaloniaBuildWindows"]
     runs-on: ubuntu-latest
     steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: AvaloniaWindowsBuildArtifact
          path: dist
      - name: Prepare Formatter
        run: |
           mkdir dist/upload-artifacts/Plugins
           mv dist/plugins/CorePlugin.dll dist/upload-artifacts/Plugins
      - name: Create zips
        run: |
           cd dist/upload-artifacts
           zip -r LatestDevelopment_WindowsAvaloniaXmlFormatter.zip .
           cd ../plugins/
           zip -r LatestDevelopment_WindowsAvaloniaJsonPlugin.zip .
      - name: Move artifact
        run: |
           mkdir upload-artifacts/
           mv dist/upload-artifacts/LatestDevelopment_WindowsAvaloniaXmlFormatter.zip upload-artifacts/
           mv dist/plugins/LatestDevelopment_WindowsAvaloniaJsonPlugin.zip upload-artifacts/
      - name: Upload Windows Avalonia build artifact
        uses: actions/upload-artifact@v2
        with:
          name: WindowsAvaloniaZipArtifact
          path: |
            upload-artifacts/
   createAvaloniaZipLinux:
     name: Create Avalonia Linux zip
     needs: ["createAvaloniaBuildLinux"]
     runs-on: ubuntu-latest
     steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: AvaloniaLinuxBuildArtifact
          path: dist
      - name: Prepare Formatter
        run: |
           mkdir dist/upload-artifacts/Plugins
           mv dist/plugins/CorePlugin.dll dist/upload-artifacts/Plugins
      - name: Create zips
        run: |
           cd dist/upload-artifacts
           zip -r LatestDevelopment_LinuxAvaloniaXmlFormatter.zip .
           cd ../plugins/
           zip -r LatestDevelopment_LinuxAvaloniaJsonPlugin.zip .
      - name: Move artifact
        run: |
           mkdir upload-artifacts/
           mv dist/upload-artifacts/LatestDevelopment_LinuxAvaloniaXmlFormatter.zip upload-artifacts/
           mv dist/plugins/LatestDevelopment_LinuxAvaloniaJsonPlugin.zip upload-artifacts/
      - name: Upload Linux Avalonia build artifact
        uses: actions/upload-artifact@v2
        with:
          name: LinuxAvaloniaZipArtifact
          path: |
            upload-artifacts/
   createAvaloniaZipDarwin:
     name: Create Avalonia Darwin zip
     needs: ["createAvaloniaBuildDarwin"]
     runs-on: ubuntu-latest
     steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: AvaloniaDarwinBuildArtifact
          path: dist
      - name: Prepare Formatter
        run: |
           mkdir dist/upload-artifacts/Plugins
           mv dist/plugins/CorePlugin.dll dist/upload-artifacts/Plugins
      - name: Create zips
        run: |
           cd dist/upload-artifacts
           zip -r LatestDevelopment_DarwinAvaloniaXmlFormatter.zip .
           cd ../plugins/
           zip -r LatestDevelopment_DarwinAvaloniaJsonPlugin.zip .
      - name: Move artifact
        run: |
           mkdir upload-artifacts/
           mv dist/upload-artifacts/LatestDevelopment_DarwinAvaloniaXmlFormatter.zip upload-artifacts/
           mv dist/plugins/LatestDevelopment_DarwinAvaloniaJsonPlugin.zip upload-artifacts/
      - name: Upload Darwin Avalonia build artifact
        uses: actions/upload-artifact@v2
        with:
          name: DarwinAvaloniaZipArtifact
          path: |
            upload-artifacts/
   uploadRelease:
     name: Upload releases
     needs: ["createAvaloniaZipWindows", "createAvaloniaZipLinux", "createAvaloniaZipDarwin"]
     runs-on: ubuntu-latest
     steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: Read folder content
        run: ls -la dist
      - name: Get release tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release - Version ${{ env.RELEASE_VERSION }}
          body: You cannot update this version from within the application!
          draft: true
          prerelease: true
      - name: Upload WinForm JsonPlugin zip
        id: upload-win-form-json-plugin-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/WinFormZipArtifact/LatestDevelopment_WinFormsJsonPlugin.zip
          asset_name: LatestDevelopment_WinFormsJsonPlugin.zip
          asset_content_type: application/zip
      - name: Upload Windows Avalonia XmlFormatter zip
        id: upload-avalonia-windows-formatter-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/WindowsAvaloniaZipArtifact/LatestDevelopment_WindowsAvaloniaXmlFormatter.zip
          asset_name: LatestDevelopment_WindowsAvaloniaXmlFormatter.zip
          asset_content_type: application/zip
      - name: Upload Windows Avalonia JsonPlugin zip
        id: upload-avalonia-windows-json-plugin-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/WindowsAvaloniaZipArtifact/LatestDevelopment_WindowsAvaloniaJsonPlugin.zip
          asset_name: LatestDevelopment_WindowsAvaloniaJsonPlugin.zip
          asset_content_type: application/zip
      - name: Upload Linux Avalonia XmlFormatter zip
        id: upload-avalonia-linux-formatter-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/LinuxAvaloniaZipArtifact/LatestDevelopment_LinuxAvaloniaXmlFormatter.zip
          asset_name: LatestDevelopment_LinuxAvaloniaXmlFormatter.zip
          asset_content_type: application/zip
      - name: Upload Linux Avalonia JsonPlugin zip
        id: upload-avalonia-linux-json-plugin-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/LinuxAvaloniaZipArtifact/LatestDevelopment_LinuxAvaloniaJsonPlugin.zip
          asset_name: LatestDevelopment_LinuxAvaloniaJsonPlugin.zip
          asset_content_type: application/zip
      - name: Upload Darwin Avalonia XmlFormatter zip
        id: upload-avalonia-darwin-formatter-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/DarwinAvaloniaZipArtifact/LatestDevelopment_DarwinAvaloniaXmlFormatter.zip
          asset_name: LatestDevelopment_DarwinAvaloniaXmlFormatter.zip
          asset_content_type: application/zip
      - name: Upload Darwin Avalonia JsonPlugin zip
        id: upload-avalonia-darwin-json-plugin-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/DarwinAvaloniaZipArtifact/LatestDevelopment_DarwinAvaloniaJsonPlugin.zip
          asset_name: LatestDevelopment_DarwinAvaloniaJsonPlugin.zip
          asset_content_type: application/zip